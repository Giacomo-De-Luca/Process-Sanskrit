        ## c'è una funzione che fa esattamente questo dopo... probabilmente si può evitare. 
        # Look for prefixes only at the start
        if result is None:
            for prefix in SANSKRIT_PREFIXES:
                if text.startswith(prefix):
                    remainder = text[len(prefix):]
                    print("remainder", remainder)
                    print("prefix", prefix)
                    attempt = root_any_word(remainder)
                    print("attempt", attempt)
                    if attempt is not None:
                        result_vocabulary = get_voc_entry(attempt, *dict_names)
                        result = process(prefix) + clean_results(result_vocabulary, debug=debug, roots=roots)
                        return result
                    else:
                        for nested_prefix in SANSKRIT_PREFIXES:
                            if remainder.startswith(nested_prefix):
                                nested_remainder = remainder[len(nested_prefix):]
                                print("nested_remainder", nested_remainder)
                                nested_attempt = root_any_word(nested_remainder)
                                if nested_attempt is not None:
                                    result_vocabulary = get_voc_entry(nested_attempt, *dict_names)
                                    print("prefix2", prefix)
                                    print("nested_prefix2", nested_prefix)
                                    result = process(prefix) + process(nested_prefix) + clean_results(result_vocabulary, debug=debug, roots=roots)
                                    return result
                                    

                        
            ## commented out as it breaks a lot of words like samadhi // it matches too much
            #       else:

                        ### breaks with ps.process("samādhipariṇāmaḥ")
                        #for nested_prefix in SANSKRIT_PREFIXES:
                            #if remainder.startswith(nested_prefix):
                                #nested_remainder = remainder[len(prefix):]
                                #print("nested_remainder", nested_remainder)
                                #nested_attempt = root_any_word(nested_remainder)
                                #if nested_attempt is not None:
                                    #result = [prefix] + [nested_prefix] + nested_attempt
                                    #break